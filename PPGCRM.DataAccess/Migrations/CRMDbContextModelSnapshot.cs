// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PPGCRM.DataAccess;

#nullable disable

namespace PPGCRM.DataAccess.Migrations
{
    [DbContext(typeof(CRMDbContext))]
    partial class CRMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.ClientEntity", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientEmail")
                        .HasColumnType("text");

                    b.Property<string>("ClientPhone")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("Director")
                        .HasColumnType("text");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.ProcessEntity", b =>
                {
                    b.Property<Guid>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FactEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NotDoneReasons")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlanEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Problems")
                        .HasColumnType("text");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalProcessCost")
                        .HasColumnType("numeric");

                    b.HasKey("ProcessId");

                    b.HasIndex("StageId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ConstructionWorksStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Expenses")
                        .HasColumnType("numeric");

                    b.Property<bool?>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.StageEntity", b =>
                {
                    b.Property<Guid>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PlanEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TaskId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProcessEntityUserEntity", b =>
                {
                    b.Property<Guid>("ProcessesProcessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResponsibleUsersUserId")
                        .HasColumnType("uuid");

                    b.HasKey("ProcessesProcessId", "ResponsibleUsersUserId");

                    b.HasIndex("ResponsibleUsersUserId");

                    b.ToTable("ProcessEntityUserEntity");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.ProcessEntity", b =>
                {
                    b.HasOne("PPGCRM.DataAccess.Entities.StageEntity", "Stage")
                        .WithMany("Processes")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.ProjectEntity", b =>
                {
                    b.HasOne("PPGCRM.DataAccess.Entities.ClientEntity", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.StageEntity", b =>
                {
                    b.HasOne("PPGCRM.DataAccess.Entities.ProjectEntity", "Project")
                        .WithMany("Stages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.TaskEntity", b =>
                {
                    b.HasOne("PPGCRM.DataAccess.Entities.ProcessEntity", "Process")
                        .WithMany("Tasks")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");
                });

            modelBuilder.Entity("ProcessEntityUserEntity", b =>
                {
                    b.HasOne("PPGCRM.DataAccess.Entities.ProcessEntity", null)
                        .WithMany()
                        .HasForeignKey("ProcessesProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PPGCRM.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("ResponsibleUsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.ClientEntity", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.ProcessEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.ProjectEntity", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("PPGCRM.DataAccess.Entities.StageEntity", b =>
                {
                    b.Navigation("Processes");
                });
#pragma warning restore 612, 618
        }
    }
}
